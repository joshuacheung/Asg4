#!/usr/bin/perl
use strict;
use warnings;

my @inputs;

my $makefile = "Makefile";
open my $fh, '<', $makefile or die "Cannot open file : $_"; #file handler
use Data::Dumper;


while(my $line = <$fh>){
  chomp $line; #gets rid of whitespace
  push(@inputs, $line);
}

sub parse_dep ($) {
   my ($line) = @_;
    return undef unless $line =~ m/^(\S+)\s*:\s*(.*?)\s*$/;
    my ($target, $dependency) = ($1, $2);
    my @dependencies = split m/\s+/, $dependency;
    return $target, \@dependencies;
}


my %graph;
my %comgraph;
my @commands;
my $tar;
my $com;
my %macros;
my @orderarray;
my $key;
my $value;
#loop through each input line
for my $input (@inputs) {

  my $firstChar = substr $input, 0, 1;
  #if line has equals in it and does not start with a tab then
  #it is assigning macros.
  if ($input =~ /\s=\s/ && $firstChar ne "\t"){
    chomp $input;
    ($key, $value) = split /\s+=\s+/, $input;
    $macros{$key} = $value;
    push(@orderarray, $key);
    print "\$key: $key\n";
    print "value: $value\n";
    print "\n";

    #changes all macros to their definitions, in order of declaration
    for my $nextinput (@inputs){
      $nextinput =~ s/\${$key}/$value/g;
    }
  }

  #pushing values to the commands hash and dependencies hash
  #with targets as keys
  my ($target, $deps) = parse_dep $input;
  if(defined $target){
      $graph{$target} = $deps;
      $tar = $target;
    }else{
      if($input=~ "\t"){
        $input =~ s/\t|\n//g;
        print "input: $input\n";
        $com = $input;
        push @{$comgraph{$tar}} , $com;
      }
    }
}



#if '@' in command then remove and call system,
#else print command and call system

#need to add while loop, while character is not '$' add to new string line,
#when encountering a '$' find the macro in the hashtable and add the
#value to the new string line
foreach my $key (keys %comgraph){
  my $count = 0;
  my $finalcommand = "";
  my $string = "@{$comgraph{$key}}";

  print "$string\n";

  my $firstchar = substr($string, 0,1);
  if($firstchar =~ "@"){
    system (substr($string, 1));
  }else{
    #print "$string\n";
    my $macroString = "";
    my $temp;

  }
  print "final: $finalcommand\n";
  print "\n";


}



print Dumper(\%graph);
